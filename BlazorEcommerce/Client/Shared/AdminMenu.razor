@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims

@if (authorized)
{
    <MudDivider DividerType="DividerType.Inset" Class="mt-3 mb-3" />
    <MudNavGroup Title="Admin" Expanded="true" Icon="@Icons.Material.Filled.AdminPanelSettings">
        <MudNavLink Href="admin/categories" Icon="@Icons.Material.Filled.Edit">Categories</MudNavLink>
        <MudNavLink Href="admin/product-types" Icon="@Icons.Material.Filled.Edit">Product Types</MudNavLink>
        <MudNavLink Href="admin/products" Icon="@Icons.Material.Filled.Edit">Products</MudNavLink>
    </MudNavGroup>
}

@code {
    bool authorized = false;

    protected override async Task OnInitializedAsync()
    {
        string? role = (await AuthStateProvider.GetAuthenticationStateAsync())
            .User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)!.Value;

        if (role.Contains("Admin"))
            authorized = true;
    }
}