@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService
@inject ICategoryService CategoryService

<HomeButton />
<div class="d-flex flex-column justify-content-center">
    <MudDivider DividerType="DividerType.Inset" Class="mt-3 mb-3" />
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="profile" Icon="@Icons.Material.Filled.People" IconColor="Color.Info">Your Profile</MudNavLink>
            <MudNavLink Href="orders" Icon="@Icons.Material.Filled.Article" IconColor="Color.Info">Your Orders</MudNavLink>
            <MudNavLink OnClick="Logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Warning">Logout</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink OnClick="Login" Icon="@Icons.Material.Filled.Login" IconColor="Color.Info">Login</MudNavLink>
            <MudNavLink Href="register" Icon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Info">Register</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
    <MudDivider DividerType="DividerType.Inset" Class="mt-3 mb-3"/>
    <MudNavGroup Title="Categories" Expanded="true">
        @foreach (var category in CategoryService.Categories)
        {
            <MudNavLink Href="@category.Url">@category.Name</MudNavLink>
        }
    </MudNavGroup>

    <AuthorizeView>
        <Authorized>
            <AdminMenu />
        </Authorized>
    </AuthorizeView>
    <MudDivider DividerType="DividerType.Inset" Class="mt-3 mb-3"/>
</div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetCategories();
        CategoryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await CartService.GetCartItemsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }

    private void Login()
    {
        NavigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
    }
}