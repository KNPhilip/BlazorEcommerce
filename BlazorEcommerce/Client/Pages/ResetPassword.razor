@page "/reset-password"
@inject IAuthService AuthService
@inject IMailService MailService
@inject ISnackbar SnackBar
@inject NavigationManager NavigationManager

<div class="container mt-5">
    @if (usTok is null || usEm is null)
    {
        <MudContainer>
            <MudCard style="margin-top:60px; width:80%;" Elevation="5" Class="pa-auto ml-auto mr-auto">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Reset your Password (Step 2)</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">This page can not be called without a valid token and user email address.</MudAlert>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="true" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>
    }
    else
    {
        <EditForm Model="@resetDto" OnValidSubmit="@HandleReset">
            <DataAnnotationsValidator />
            <MudCard style="margin-top:60px; width:80%;" Elevation="5" Class="pa-auto ml-auto mr-auto">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Reset Password</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Email address" Disabled="true" HelperText="Max. 8 characters" @bind-Value="@usEm" For="@(() => resetDto.UserEmail)" />
                    <MudTextField Label="Reset token" Disabled="true" Class="mt-3" HelperText="the token you'vet got by mail'" @bind-Value="@usTok" For="@(() => resetDto.ResetToken)" />
                    <MudTextField Label="New Password" HelperText="Choose a strong password" Class="mt-3" @bind-Value="@resetDto.NewPassword" For="@(() => resetDto.NewPassword)" InputType="InputType.Password" />
                    <MudTextField Label="repeat new Password" HelperText="Repeat the password" Class="mt-3" @bind-Value="@resetDto.ConfirmNewPassword" For="@(() => resetDto.ConfirmNewPassword)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Reset Password</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</div>

@code {
    private PasswordResetDto resetDto = new();
    private StringValues tok = String.Empty;
    private StringValues em = String.Empty;
    private string? usTok { get; set; }
    private string? usEm { get; set; }
    private bool showMsg = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out tok))
            usTok = Convert.ToString(tok);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("user", out em))
            usEm = Convert.ToString(em);
    }

    private async Task HandleReset()
    {
        resetDto.ResetToken = usTok;
        resetDto.UserEmail = usEm;
        var res = await AuthService.ResetPassword(resetDto);
        if (!res.Success)
        {
            snackMessage(res.Message, Severity.Error, Defaults.Classes.Position.BottomRight);
        }
        else
        {
            snackMessage(res.Message, Severity.Success, Defaults.Classes.Position.BottomRight);
            var Count = 3;
            var tmr = new System.Threading.Timer(new TimerCallback(_ =>
            {
                if (Count > 0)
                    Count--;
                if (Count == 0)
                {
                    SnackBar.Clear();
                    NavigationManager.NavigateTo("/login");
                }
            }), null, 1000, 1000);
        }
    }

    private void snackMessage(string message, MudBlazor.Severity type, string position)
    {
        SnackBar.Clear();
        SnackBar.Configuration.PositionClass = position;
        SnackBar.Add(message, type);
    }
}