@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <h3>Login</h3>

    <EditForm Model="user" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="mb-3">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <MudText Class="mb-2">Forgot your password?&nbsp;<MudLink Style="font-weight:bold;" Href="/forgot-password">reset here..</MudLink></MudText>
        <button type="submit" class="btn btn-primary mb-2">Login</button>
    </EditForm>
    <div class="text-danger">
        <span>@errorMessage</span>
    </div>
</div>

@code {
    private UserLoginDto user = new();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
            returnUrl = url;
    }

    private async Task HandleLogin()
    {
        ServiceResponse<string> result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else errorMessage = result.Error;
    }
}