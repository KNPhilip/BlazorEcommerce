@page "/admin/categories"
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<div class="container mt-5">
    <MudText Typo="Typo.h3">Categories</MudText>

    <div class="header">
        <div class="col">Name</div>
        <div class="col">Url</div>
        <div class="col">Visible</div>
        <div class="col"></div>
    </div>

    @foreach(Category category in CategoryService.AdminCategories)
    {
        @if(category.Editing)
        {
            <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
                <div class="row">
                    <div class="col">
                        <InputText @bind-Value="editingCategory!.Name" class="form-control"></InputText>
                    </div>
                    <div class="col">
                        <InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
                    </div>
                    <div class="col d-flex justify-content-center">
                        <MudSwitch Style="margin-left: 6px;" @bind-Checked="editingCategory.Visible" Color="Color.Info" />
                    </div>
                    <div class="col">
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Upload" Disabled="@(editingCategory.Name.Length <= 0 || editingCategory.Url.Length <= 0)" Color="Color.Info" aria-label="save" ButtonType="ButtonType.Submit" />
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Close" Color="Color.Error" aria-label="cancel" OnClick="CancelEditing" />
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <div class="row">
                <div class="col" style="text-align: center;">
                    @category.Name
                </div>
                <div class="col" style="text-align: center;">
                    @category.Url
                </div>
                <div class="col col-visible">
                    <MudIcon Icon="@(category.Visible ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)" Color="Color.Info"></MudIcon>
                </div>
                <div class="col">
                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Disabled="!(editingCategory is null)" Color="Color.Info" aria-label="edit" OnClick="(() => EditCategory(category))" />
                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Disabled="!(editingCategory is null)" Color="Color.Error" aria-label="delete" OnClick="(() => DeleteCategory(category.Id))" />
                </div>
            </div>
        }
    }
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="mt-3" Disabled="!(editingCategory is null)" Color="Color.Info" aria-label="create" OnClick="CreateNewCategory">Add new Category</MudButton>
</div>

@code {
    Category? editingCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAdminCategories();
        CategoryService.OnChange += StateHasChanged;
    }

    public void Dispose() =>
        CategoryService.OnChange += StateHasChanged;

    private void CreateNewCategory() =>
        editingCategory = CategoryService.CreateNewCategory();

    private void EditCategory(Category category)
    {
        category.Editing = true;
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory!.IsNew)
            await CategoryService.AddCategory(editingCategory);
        else
            await CategoryService.UpdateCategory(editingCategory);

        editingCategory = null;
    }

    private async Task CancelEditing()
    {
        await CategoryService.GetAdminCategories();
        editingCategory = null;
    }

    private async Task DeleteCategory(int id) =>
        await CategoryService.DeleteCategory(id);
}