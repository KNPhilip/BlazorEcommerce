@page "/admin/product"
@page "/admin/product/{id:int}"
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<div class="container mt-5">
    @if(!isLoaded)
    {
        if(string.IsNullOrEmpty(message))
        {
            <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
        }
        else
        {
            <MudText Typo="Typo.h5">@message</MudText>
        }
    }
    else
    {
        if (product.Editing)
        {
            <MudText Typo="Typo.h3">Edit "@product.Title"</MudText>
        }
        else if (product.IsNew)
        {
            <MudText Typo="Typo.h3">Create a new product</MudText>
        }

        <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
            <MudText Class="mb-2 mt-4" Typo="Typo.h5">Essentials</MudText>
            <DataAnnotationsValidator />
            <div class="mb-3 mt-3">
                <MudTextField 
                    T="string" 
                    Label="Title" 
                    Variant="Variant.Outlined" 
                    Required="true" 
                    RequiredError="Title is required!" 
                    @bind-Value="product.Title" 
                />
            </div>
            <div class="mb-3">
                <MudTextField 
                    T="string"
                    Lines="3"
                    Label="Description" 
                    Variant="Variant.Outlined"
                    @bind-Value="product.Description" 
                />
            </div>
            <MudSwitch Class="mt-3" @bind-Checked="product.Featured" Label="Featured" Color="Color.Info" />
            <MudSwitch Class="mb-3" @bind-Checked="product.Visible" Label="Visible" Color="Color.Info" />
            <MudText Class="mb-2 mt-4" Typo="Typo.h5">Images (at least one)</MudText>
            <div class="mb-3">
                <MudTextField 
                    T="string" 
                    Label="Image Url" 
                    Variant="Variant.Outlined" 
                    @bind-Value="product.ImageUrl" 
                />
            </div>
            <div class="d-flex flex-column">
                @if (!string.IsNullOrEmpty(product.ImageUrl))
                {
                    <MudText Typo="Typo.body1">From Url:</MudText>
                    <div style="display: flex; flex-wrap: wrap; flex-direction: row;">
                        <MudCard Class="ma-2">
                            <MudCardContent>
                                <MudImage Src="@product.ImageUrl" />
                            </MudCardContent>
                        </MudCard>
                    </div>
                }
                @if (product.Images.Count > 0)
                {
                    <MudText Typo="Typo.body1">From Upload:</MudText>
                    <div style="display: flex; flex-wrap: wrap; flex-direction: row;">
                        @foreach (var image in product.Images)
                        {
                            <MudCard Class="ma-2">
                                <MudCardContent>
                                    <MudImage Src="@image.Data" />
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                }
            </div>
            <div class="mb-3">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnFileChange" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                    <ButtonTemplate Context="wut">
                        <MudPaper Height="200px" Outlined="true" Class="@DragClass">
                            <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                            @foreach (var file in fileNames)
                            {
                                <MudChip Color="Color.Dark" Text="@file" />
                            }
                        </MudPaper>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudToolBar DisableGutters="true" Class="gap-4 mt-3">
                    <MudButton OnClick="ClearImages" Disabled="@(product.Images.Count == 0 && string.IsNullOrEmpty(product.ImageUrl))" Color="Color.Error" Variant="Variant.Filled">Clear Images</MudButton>
                </MudToolBar>
            </div>
            <MudText Class="mb-2 mt-4" Typo="Typo.h5">Variants</MudText>

            <div class="header">
                <div class="col">Product Type</div>
                <div class="col">Price</div>
                <div class="col">Original Price</div>
                <div class="col">Visible</div>
                <div class="col"></div>
            </div>
            @foreach(var variant in product.Variants)
            {
                <div class="row">
                    <div class="col">
                        <InputSelect disabled="@variant.IsDeleted" @bind-Value="variant.ProductTypeId" class="form-control">
                            @foreach(var productType in ProductTypeService.ProductTypes)
                            {
                                <option value="@productType.Id.ToString()">@productType.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.IsDeleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.IsDeleted"></InputNumber>
                    </div>
                    <div class="col col-visible">
                        <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.IsDeleted"></InputCheckbox>
                    </div>
                    <div class="col">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" Disabled="variant.IsDeleted" Class="float-end" OnClick="(() => RemoveVariant(variant.ProductTypeId))" />
                    </div>
                </div>
            }
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" @onclick="AddVariant">Add Variant</MudButton>
            <hr />
            <div class="mb-3">
                <MudText Class="mb-2 mt-4" Typo="Typo.h5">Category</MudText>
                <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                    @foreach(var category in CategoryService.AdminCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <hr />
            <MudButton ButtonType="ButtonType.Submit" Class="float-end mb-3 ml-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">@btnText</MudButton>
            <ValidationSummary class="mb-3"></ValidationSummary>
        </EditForm>
        @if (!product.IsNew)
        {
            <MudButton Class="float-end" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="DeleteProduct">Delete Product</MudButton>
        }
        <MudButton Href="admin/products" Class="float-start mb-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Info">Go back</MudButton>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new();
    string btnText = "";
    bool isLoaded = false;
    string message = string.Empty;

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id == 0)
        {
            product = new()
            {
                IsNew = true
            };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct is null)
            {
                message = $"Product with Id '{Id}' does not exist.";
                return;
            }

            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        isLoaded = true;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant is null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.IsDeleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants.Add(new ProductVariant
        {
            IsNew = true,
            ProductId = product.Id
        });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete '{product.Title}'?");

        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            fileNames.Add(file.Name);
        }

        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            product.Images.Add(
                new Image
                {
                    Data = imageData
                }
            );
        }
    }

    private async Task ClearImages()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        product.Images.Clear();
        product.ImageUrl = "";
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}