@page "/admin/product"
@page "/admin/product/{id:int}"
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime

<div class="container">
    @if (loading)
    {
        <span>@msg</span>
    }
    else
    {
        if (product.Editing)
        {
            <h3>Edit "@product.Title"</h3>
        }
        else if (product.IsNew)
        {
            <h3>Create a new Product</h3>
        }

        <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
            <DataAnnotationsValidator />
            <div class="mb-2">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
            </div>
            <div class="mb-0">
                <label for="imageUrl">Image Url</label>
                <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
            </div>
            <div class="mb-2">
                <img src="@product.ImageUrl" />
            </div>
            <div class="mb-2">
                <label for="description">Description</label>
                <InputText id="description" @bind-Value="product.Description" class="form-control"></InputText>
            </div>
            <label>Variants</label>
            <div class="header">
                <div class="col">Product Type</div>
                <div class="col">Price</div>
                <div class="col">Original Price</div>
                <div class="col">Visible</div>
                <div class="col"></div>
            </div>
            @foreach(var variant in product.Variants)
            {
                <div class="row">
                    <div class="col">
                        <InputSelect disabled="@variant.IsDeleted" @bind-Value="variant.ProductTypeId" class="form-control">
                            @foreach(var productType in ProductTypeService.ProductTypes)
                            {
                                <option value="@productType.Id.ToString()">@productType.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.IsDeleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.IsDeleted"></InputNumber>
                    </div>
                    <div class="col col-visible">
                        <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.IsDeleted"></InputCheckbox>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-primary" disabled="@variant.IsDeleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </div>
                </div>
            }
            <button type="button" class="btn btn-primary" @onclick="AddVariant">
                <i class="oi oi-plus"></i> Add Variant
            </button>
            <hr />
            <div class="mb-3">
                <label for="category">Category</label>
                <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                    @foreach(var category in CategoryService.AdminCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-check">
                <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
                <label for="featured" class="form-check-label">Featured</label>
            </div>
            <div class="form-check">
                <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                <label for="visible" class="form-check-label">Visible</label>
            </div>
            <hr />
            <button type="submit" class="btn btn-primary float-end mb-3">@btnText</button>
            <ValidationSummary></ValidationSummary>
        </EditForm>
        @if (!product.IsNew)
        {
            <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
                Delete Product
            </button>
        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id == 0)
        {
            product = new()
            {
                IsNew = true
            };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct is null)
            {
                msg = $"Product with Id '{Id}' does not exist.";
                return;
            }

            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant is null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.IsDeleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants.Add(new ProductVariant
        {
            IsNew = true,
            ProductId = product.Id
        });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete '{product.Title}'?");

        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }
}