@page "/admin/product-types"
@inject IProductTypeService ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<div class="container mt-5">
    <MudText Typo="Typo.h3">Product Types</MudText>

    @foreach(var productType in ProductTypeService.ProductTypes)
    {
        @if (productType.Editing)
        {
            <EditForm Model="editingProductType" OnSubmit="UpdateProductType">
                <div class="d-flex justify-content-between mt-3">
                    <InputText @bind-Value="editingProductType.Name" class="form-control" style="max-width: 400px;"></InputText>
                    <div>
                        <MudIconButton ButtonType="ButtonType.Submit" Disabled="@(editingProductType.Name.Length <= 0)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Save" Color="Color.Info" aria-label="save"></MudIconButton>
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Close" Color="Color.Error" aria-label="cancel" OnClick="CancelEditing"></MudIconButton>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <div class="d-flex justify-content-between mt-3">
                <MudText>@productType.Name</MudText>
                <div>
                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Disabled="!(editingProductType == null)" Color="Color.Info" aria-label="edit" OnClick="@(() => EditProductType(productType))"></MudIconButton>
                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Disabled="!(editingProductType == null)" Color="Color.Error" aria-label="delete" OnClick="@(() => DeleteProductType(productType.Id))"></MudIconButton>
                </div>
            </div>
        }
    }
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="mt-3" Disabled="!(editingProductType == null)" Color="Color.Info" aria-label="create" OnClick="CreateNewProductType">Add new Product Type</MudButton>
</div>

@code {
    ProductType editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

    private void EditProductType(ProductType productType)
    {
        productType.Editing = true;
        editingProductType = productType;
    }

    private void CreateNewProductType()
    {
        editingProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task CancelEditing()
    {
        await ProductTypeService.GetProductTypes();
        editingProductType = null;
    }

    private async Task UpdateProductType()
    {
        if (editingProductType.IsNew)
            await ProductTypeService.AddProductType(editingProductType);
        else
            await ProductTypeService.UpdateProductType(editingProductType);
        editingProductType = null;
    }

    private async Task DeleteProductType(int productTypeId)
    {
        await ProductTypeService.DeleteProductType(productTypeId);
    }
}