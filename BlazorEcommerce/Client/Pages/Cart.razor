@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Shopping cart</PageTitle>

<div class="container mt-5">
    <h3>Shopping Cart</h3>

    @if (cartProducts is null || cartProducts.Count == 0)
    {
        <span>@message</span>
    }
    else
    {
        <div>
            @foreach (CartProductResponseDto product in cartProducts)
            {
                <div class="wrapper">
                    <div class="image-wrapper">
                        <img src="@product.ImageUrl" class="image" />
                    </div>
                    <div class="name">
                        <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                        <span>@product.ProductType</span>
                        <input type="number" value="@product.Quantity" 
                        @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" 
                        class="form-control input-quantity"
                        min="1" />
                        <br/>
                        <button class="btn-delete" @onclick="@(() => 
                            RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Remove from Cart</button>
                    </div>
                    <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
                </div>
            }
                <div class="cart-product-price wrapper">
                    Total: (@cartProducts.Count): $@cartProducts.Sum(product => product.Price * product.Quantity)
                </div>
                @if (isAuthenticated)
                {
                    <br />
                    <h5>Delivery Address</h5>
                    <AddressForm />
                }
            <button @onclick="PlaceOrder" class="btn btn-success mt-2 mb-2">Checkout</button>
        </div>
    }
</div>

@code {
    List<CartProductResponseDto>? cartProducts = null;
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts is null || cartProducts.Count == 0)
            message = "Your cart is empty.";
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}