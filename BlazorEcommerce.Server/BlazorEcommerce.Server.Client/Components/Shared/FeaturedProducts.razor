@inject IProductUIService ProductUIService
@implements IDisposable

<center><h2>Current Top Products:</h2></center>
@if(ProductUIService.Products is null || ProductUIService.Products.Count == 0)
{
    if(string.IsNullOrEmpty(ProductUIService.Message))
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <span>@ProductUIService.Message</span>
    }
}
else
{
    <div class="container">
        @foreach (Product product in ProductUIService.Products)
        {
            @if (product.Featured)
            {
                <div class="featured-product">
                    <div>
                        <a href="product/@product.Id">
                            @if(!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl">
                            }
                            else if(product.Images.Count > 0)
                            {
                                <img src="@product.Images[0].Data" />
                            }
                        </a>
                    </div>
                    <h4>
                        <a href="product/@product.Id">@product.Title</a>
                    </h4>
                    @if(product.Variants is not null && product.Variants.Count > 0)
                    {
                        <h5 class="price">
                            $@product.Variants[0].Price
                        </h5>
                    }
                </div>
            }
        }
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductUIService.OnProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductUIService.OnProductsChanged -= StateHasChanged;
    }
}
