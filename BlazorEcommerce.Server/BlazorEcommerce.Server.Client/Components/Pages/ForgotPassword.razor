@page "/forgot-password"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject IAuthUIService AuthUIService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Forgot password</PageTitle>

<div class="container mt-5">
    <EditForm Model="@user" OnValidSubmit="@SendMail">
        <DataAnnotationsValidator />
        <MudText Typo="Typo.h6">Reset your password (Step 1)</MudText>
        <MudText>Resetting your password requires 2 steps!</MudText><br />
        <MudText><b>Step 1:</b>&nbsp; Use this form to request an email to reset your password. <br /> <b>NOTE:</b> you must provide the email address that was used creating your account!</MudText><br />
        <MudText><b>Step 2:</b>&nbsp; Click on the link in the email you'll receive to reset your password.</MudText>
        <br />
        <MudTextField Class="mb-3" Label="Email address" HelperText="Please use your registered email address." @bind-Value="@user.Email" For="@(() => user.Email)" />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Send" Class="ml-auto">Send Reset Request</MudButton>
    </EditForm>
</div>

@code {
    private User user = new();

    private async void SendMail()
    {
        string? response = await AuthUIService.CreateResetToken(user);
        if (response is not null) 
        {
            snackMessage(response, 
                Severity.Success, Defaults.Classes.Position.BottomLeft);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            snackMessage("Could not send email, please try again.", Severity.Error, Defaults.Classes.Position.BottomLeft);
        }
    }

    private void snackMessage(string message, MudBlazor.Severity type, string position)
    {
        Action<SnackbarOptions> config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, type);
    }
}
