@page "/orders/{orderId:int}"

@inject IOrderUIService OrderUIService

<PageTitle>Order details</PageTitle>

<style>
.wrapper {
  display: flex;
  padding: 6px;
}

.image-wrapper {
  width: 150px;
  text-align: center;
}

.image {
  max-height: 150px;
  max-width: 150px;
  padding: 5px;
}

.name {
  flex-grow: 1;
  padding: 6px;
}

.product-price {
  font-weight: 600;
  text-align: right;
  color: forestgreen;
}
</style>

<div class="container mt-5">
    @if (order is null)
    {
        <span>Loading order details...</span>
    }
    else
    {
        <h3>Order from @order.OrderDate</h3>
        <div>
            @foreach (OrderDetailsProductDto product in order.Products)
            {
                <div class="wrapper">
                    <div class="image-wrapper">
                        @if(!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" class="image" />
                        }
                        else if(product.Images.Count > 0)
                        {
                            <img src="@product.Images[0].Data" class="image" />
                        }
                    </div>
                    <div class="name">
                        <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                        <span>@product.ProductType</span><br />
                        <span>Quantity: @product.Quantity</span>
                    </div>
                    <div class="product-price">$@product.TotalPrice</div>
                </div>
            }
            <div class="product-price container">
                Total: $@order.TotalPrice
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int OrderId { get; set; }

    OrderDetailsDto? order = null;

    protected sealed override async Task OnInitializedAsync()
    {
        order = await OrderUIService.GetOrderDetails(OrderId);
    }
}
