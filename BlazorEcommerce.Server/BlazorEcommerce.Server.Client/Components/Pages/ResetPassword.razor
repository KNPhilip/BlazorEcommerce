@page "/reset-password"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject IAuthUIService AuthUIService
@inject ISnackbar SnackBar
@inject NavigationManager NavigationManager

<PageTitle>Reset Password</PageTitle>

<div class="container mt-5">
    @if (userToken is null || userMail is null || !validUserToken)
    {
        <MudText Typo="Typo.h5">Reset password</MudText>
        <MudAlert Class="mb-4 mt-4" Severity="Severity.Error" Variant="Variant.Filled">
            @(userToken is null || userMail is null ? "This page can not be called without a valid token and a valid user email address!" : message)
        </MudAlert>
        <MudButton Href="login" Variant="Variant.Filled" Color="Color.Info" Class="ml-auto">Login</MudButton>
    }
    else
    {
        <EditForm Model="@resetDto" OnValidSubmit="@HandleReset">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h5">Reset password</MudText>
            <MudTextField Label="Email address" Disabled="true" HelperText="Reset password for this user" @bind-Value="@userMail" For="@(() => resetDto.UserEmail)" />
            <MudTextField Label="New Password" HelperText="Choose a new password" Class="mt-2" @bind-Value="@resetDto.NewPassword" For="@(() => resetDto.NewPassword)" InputType="InputType.Password" />
            <MudTextField Label="repeat new Password" HelperText="Repeat your new password" Class="mt-3 mb-3" @bind-Value="@resetDto.ConfirmNewPassword" For="@(() => resetDto.ConfirmNewPassword)" InputType="InputType.Password" />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Save" Class="ml-auto">Reset Password</MudButton>
        </EditForm>
    }
</div>

@code {
    private PasswordResetDto resetDto = new();
    private StringValues token = String.Empty;
    private StringValues mail = String.Empty;
    private string? userToken { get; set; }
    private string? userMail { get; set; }
    private bool validUserToken = false;
    private string message = "No issues found..";

    protected sealed override async Task OnInitializedAsync()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out token))
        {
            userToken = Convert.ToString(token);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("user", out mail))
        {
            userMail = Convert.ToString(mail);
        }

        if (userMail is not null && userToken is not null)
        {
            TokenValidateDto dto = new()
                {
                    UserEmail = userMail,
                    ResetToken = userToken
                };

            bool response = await AuthUIService.ValidateResetPasswordToken(dto);
            validUserToken = response;
            message = response ? message : "Something went wrong, please try again.";
        }
    }

    private async Task HandleReset()
    {
        resetDto.ResetToken = userToken!;
        resetDto.UserEmail = userMail!;
        bool response = await AuthUIService.ResetPassword(resetDto);
        if (!response)
        {
            snackMessage("Failed to reset password", Severity.Error, Defaults.Classes.Position.BottomRight);
        }
        else
        {
            snackMessage("Password was successfully reset", Severity.Success, Defaults.Classes.Position.BottomRight);
            int Count = 3;
            Timer tmr = new System.Threading.Timer(new TimerCallback(_ =>
            {
                if (Count > 0)
                {
                    Count--;
                }
                if (Count == 0)
                {
                    SnackBar.Clear();
                    NavigationManager.NavigateTo("/login");
                }
            }), null, 1000, 1000);
        }
    }

    private void snackMessage(string message, MudBlazor.Severity type, string position)
    {
        SnackBar.Clear();
        SnackBar.Configuration.PositionClass = position;
        SnackBar.Add(message, type);
    }
}
