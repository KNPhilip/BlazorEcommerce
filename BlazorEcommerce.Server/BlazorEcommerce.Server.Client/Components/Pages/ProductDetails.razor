@page "/product/{id:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject IProductUIService ProductUIService
@inject ICartUIService CartUIService

<PageTitle>Product details</PageTitle>

<div class="container mt-5">
    @if(product is null)
    {
        if(string.IsNullOrEmpty(message))
        {
            <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
        }
        else
        {
            <MudText Typo="Typo.h5">@message</MudText>
        }
    }
    else
    {
        <div class="media">
            <div class="media-img-wrapper mr-2">
                @if(!string.IsNullOrEmpty(product.ImageUrl))
                {
                    <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                }
                else
                {
                    <MudCarousel 
                        Class="mud-width-full" 
                        ItemsSource="@product.Images" 
                        Style="height: 200px;"
                    >
                        <ItemTemplate>
                            <MudImage Src="@context.Data"></MudImage>
                        </ItemTemplate>
                    </MudCarousel>
                }
            </div>
            <div class="media-body">
                <h2 class="mb-0">@product.Title</h2>
                <p>@product.Description</p>
                @if (product.Variants is not null && product.Variants.Count > 1)
                {
                    <div class="mb-3">
                        <select class="form-select" @bind="currentTypeId">
                            @foreach (ProductVariant variant in product.Variants)
                            {
                                <option value="@variant.ProductTypeId">@variant.ProductType!.Name</option>
                            }
                        </select>
                    </div>
                }
                @if (GetSelectedVariant() is not null)
                {
                    @if (GetSelectedVariant()!.OriginalPrice > GetSelectedVariant()!.Price)
                    {
                        <h6 class="text-muted original-price">
                            $@GetSelectedVariant()!.OriginalPrice
                        </h6>
                    }
                    <h4 class="price">
                        $@GetSelectedVariant()!.Price
                    </h4>
                }
                <button class="btn btn-primary" @onclick="AddToCart">
                    <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
                </button>
            </div>
        </div>
    }
</div>

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected sealed override async Task OnParametersSetAsync()
    {
        Product? result = await ProductUIService.GetProduct(Id);
        product = result;
        if (product!.Variants.Count > 0)
        {
            currentTypeId = product.Variants[0].ProductTypeId;
        }
    }

    private ProductVariant? GetSelectedVariant()
    {
        return product!.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
    }

    private async Task AddToCart()
    {
        ProductVariant? productVariant = GetSelectedVariant();
        CartItem cartItem = new()
        {
            ProductId = productVariant!.ProductId,
            ProductTypeId = productVariant.ProductTypeId
        };

        await CartUIService.AddToCart(cartItem);
    }
}
